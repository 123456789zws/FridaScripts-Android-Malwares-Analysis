//Here the JS to count the number of time encoding and deconding methods in
//android.util.Base64 and java.util.Base64 have been called by an app
var data = {
    B64encode: [],
    B64decode: []
};

var byteArrayToString = function(input){
    var buffer = Java.array('byte', input);
    var result = "";
    for(var i = 0; i < buffer.length; ++i){
        if(buffer[i] > 31 && buffer[i]<127)
          result+= (String.fromCharCode(buffer[i]));
        else result += ' ';
    
      }
    return result;
  }
Java.perform(() => {
    var androidBase64 = Java.use('android.util.Base64');
    //decode-1
    androidBase64.decode.overloads[0].implementation = function(endString, flags){  
        var output = byteArrayToString(this.decode(endString,flags));
        data.B64decode.push(output);
        return this.decode(endString,flags);
    }
    //decode-2
    androidBase64.decode.overloads[1].implementation = function(byteString, flags){  
        var output = byteArrayToString(this.decode(byteString,flags));
        data.B64decode.push(output);
        return this.decode(byteString,flags);
    }
    //decode-3
    androidBase64.decode.overloads[2].implementation = function(byteString, offset, len, flags){  
        var output = byteArrayToString(this.decode(byteString, offset, len, flags));
        data.B64decode.push(output);
        return this.decode(endString, offset, len, flags);
    }
    //encode-1
    androidBase64.encode.overloads[0].implementation = function(byteString, flags){
        input = byteArrayToString(byteString);
        data.B64encode.push(input);
        return this.encode(byteString,flags);
    }
    //encode-2
    androidBase64.encode.overloads[1].implementation = function(byteString, offset,ln,flags){
        input = byteArrayToString(byteString);
        data.B64encode.push(input);
        return this.encode(byteString,offset,ln,flags);
    }
    //encode-3
    androidBase64.encodeToString.overloads[1].implementation = function(byteString,flags){
        input = byteArrayToString(byteString);
        data.B64encode.push(input);
        return this.encodeToString(byteString,flags);
    }
    
    //var javaBase64Decoder = Java.use('java.util.Base64.Decoder');
    //decode-1
    //javaBase64Decoder.decode.overloads('[B').implementation = function(byteString){
    //    var output = byteArrayToString(this.decode(byteString));
    //    data.B64decode.push(output);
    //    return this.decode(byteString);     
    //
    //};
    //decode-2
    //javaBase64Decoder.decode.overloads('java.lang.String').implementation = function(endString){
    //    var output = byteArrayToString(this.decode(endString));
    //    data.B64decode.push(output);
    //    return this.decode(endString);
    //};
    //decode-3
    //javaBase64Decoder.decode.overloads('[B', '[B').implementation = function(byteString1, byteString2){
    //    var i = this.decode(byteString1, byteString2);
    //    var output = byteArrayToString(byteString2);
    //    data.B64decode.push(output);
    //    return this.decode(byteString1, byteString2)
    //};
});

function sendToPython(){
    send(data);
  }
setInterval(sendToPython, 5000);




