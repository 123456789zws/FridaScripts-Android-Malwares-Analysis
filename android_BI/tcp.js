//monitor for the connect call in libc.so
var data = [];
const tcpSocketFDs = new Map();
const fSocketConnect = Module.getExportByName("libc.so", "connect");
Interceptor.attach(fSocketConnect, {
    onEnter(args) {
      this.sockFd = args[0].toInt32()
    },
    onLeave(res) {
      const sockFd = this.sockFd
      const sockType = Socket.type(sockFd)
      if (!(sockType === "tcp6" || sockType === "tcp")) return
      const sockLocal = Socket.localAddress(sockFd)
      const tcpEpLocal = sockLocal && sockLocal.ip ? sockLocal : undefined
      const sockRemote = Socket.peerAddress(sockFd)
      const tcpEpRemote = sockRemote && sockRemote.ip ? sockRemote : undefined
      if (!tcpEpLocal) return
      tcpSocketFDs.set(sockFd, tcpEpLocal)
      var msg = {
        socketFd: sockFd,
        pid: Process.id,
        threadId: this.threadId,
        socketEventType: "connect",
        type: "socketCall",
        result: res
      }
      if (tcpEpLocal) {
        msg.hostip = tcpEpLocal.ip
        msg.port = tcpEpLocal.port
      }
      if (tcpEpRemote) {
        msg.dstIp = tcpEpRemote.ip
        msg.dstPort = tcpEpRemote.port
      }
      data.push(msg);
    }
});


const libcEx = Process.getModuleByName("libc.so").enumerateExports();
const socketExports = libcEx.filter(
    expDetails =>
      expDetails.type === "function" &&
      ["shutdown", "close"].some(serachStr => serachStr === expDetails.name)
);
socketExports.forEach(exp => {
  Interceptor.attach(exp.address, {
    onEnter(args) {
      const sockFd = args[0].toInt32()
      if (!tcpSocketFDs.has(sockFd)) return
      const sockType = Socket.type(sockFd)
      if (tcpSocketFDs.has(sockFd)) {
        const tcpEP = tcpSocketFDs.get(sockFd)
        var msg = {
          socketFd: sockFd,
          pid: Process.id,
          threadId: this.threadId,
          socketEventType: exp.name,
          hostip: tcpEP.ip,
          port: tcpEP.port,
          type: "socketCall"
        }
        data.push(msg);
        tcpSocketFDs.delete(sockFd)
      }
    }
  })
}
);

function sendToPython(){
  send(data);
}
setInterval(sendToPython, 5000);