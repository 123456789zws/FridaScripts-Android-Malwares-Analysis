//Monitor cryptographic operations Java Cryptography Extension(JCE)<<Java Cryptography Architecture(JCA)
var data = {
    decryptionCount: 0,
    iv: [],
    transform: [],
    algorithms: [],
    input: [],
    content: []
}
var displayString = function(input){
    var str = input.replace('[','');
    var str1 = str.replace(']','');
    var res = str1.split(',');
    var ret = '';
    for(var i = 0; i<res.length; i++){
        if(res[i] > 31 && res[i]<127)
            ret += String.fromCharCode(res[i]);
        else ret += ' ';

    }

  return ret;
}
var byteArraytoHexString = function(byteArray){
    if (byteArray && byteArray.map) {
      return byteArray.map(function(byte) {
        return ('0' + (byte & 0xFF).toString(16)).slice(-2);
      }).join('')
    } else {
      return JSON.stringify(byteArray);
    }
}
var normalizeInput = function(input){
    if (input.array) {
      var normalized = byteArraytoHexString(input.array());
    } else if (input.length && input.length > 0) {
      var normalized = byteArraytoHexString(input);
    } else {
      var normalized = JSON.stringify(input);
    }
    return normalized;
  }


Java.perform( () => {
    var Cipher = Java.use('javax.crypto.Cipher');
    //Cipher.getInstance()
    if (Cipher.getInstance) {
        Cipher.getInstance.overloads[0].implementation = function(transformation) {
            data.transform.push(transformation);
            return this.getInstance.overloads[0].apply(this, arguments);
        }
        Cipher.getInstance.overloads[0].implementation = function(transformation, provider) {
            data.transform.push(transformation);
            return this.getInstance.overloads[0].apply(this, arguments);
        }
        Cipher.getInstance.overloads[0].implementation = function(transformation, provider) {
            data.transform.push(transformation);
            return this.getInstance.overloads[0].apply(this, arguments);
        }
      }

    //Cipher.doFinal()
    if (Cipher.doFinal) {
        Cipher.doFinal.overloads[0].implementation = function(input) {
            data.decryptionCount++;
            if (input) {
                var ctx = normalizeInput(input);
                data.input.push(ctx)
            }
            data.algorithms.push(this.getAlgorithm());
            data.iv.push(byteArraytoHexString(this.getIV()));
            var retVal = this.doFinal.overloads[0].apply(this, arguments);
            var tmp = byteArraytoHexString(retVal);
            var decipher = displayString(tmp);
            data.content.push(decipher)
            return retVal;
        }
        Cipher.doFinal.overloads[1].implementation = function(input) {
            data.decryptionCount++;
            if (input) {
                var ctx = normalizeInput(input);
                data.input.push(ctx)
            }
            data.algorithms.push(this.getAlgorithm());
            data.iv.push(byteArraytoHexString(this.getIV()));
            var retVal = this.doFinal.overloads[1].apply(this, arguments);
            var tmp = byteArraytoHexString(retVal);
            var decipher = displayString(tmp);
            data.content.push(decipher)
            return retVal;
        }
        Cipher.doFinal.overloads[2].implementation = function(input) {
            data.decryptionCount++;
            if (input) {
                var ctx = normalizeInput(input);
                data.input.push(ctx)
            }
            data.algorithms.push(this.getAlgorithm());
            data.iv.push(byteArraytoHexString(this.getIV()));
            var retVal = this.doFinal.overloads[2].apply(this, arguments);
            var tmp = byteArraytoHexString(retVal);
            var decipher = displayString(tmp);
            data.content.push(decipher)
            return retVal;
        }
        Cipher.doFinal.overloads[3].implementation = function(input) {
            data.decryptionCount++;
            if (input) {
                var ctx = normalizeInput(input);
                data.input.push(ctx)
            }
            data.algorithms.push(this.getAlgorithm());
            data.iv.push(byteArraytoHexString(this.getIV()));
            var retVal = this.doFinal.overloads[3].apply(this, arguments);
            var tmp = byteArraytoHexString(retVal);
            var decipher = displayString(tmp);
            data.content.push(decipher)
            return retVal;
        }    
        Cipher.doFinal.overloads[4].implementation = function(input) {
            data.decryptionCount++;
            if (input) {
                var ctx = normalizeInput(input);
                data.input.push(ctx)
            }
            data.algorithms.push(this.getAlgorithm());
            data.iv.push(byteArraytoHexString(this.getIV()));
            var retVal = this.doFinal.overloads[4].apply(this, arguments);
            var tmp = byteArraytoHexString(retVal);
            var decipher = displayString(tmp);
            data.content.push(decipher)
            return retVal;
        }
        Cipher.doFinal.overloads[5].implementation = function(input) {
            data.decryptionCount++;
            if (input) {
                var ctx = normalizeInput(input);
                data.input.push(ctx)
            }
            data.algorithms.push(this.getAlgorithm());
            data.iv.push(byteArraytoHexString(this.getIV()));
            var retVal = this.doFinal.overloads[5].apply(this, arguments);
            var tmp = byteArraytoHexString(retVal);
            var decipher = displayString(tmp);
            data.content.push(decipher)
            return retVal;
        }
        Cipher.doFinal.overloads[6].implementation = function(input) {
            data.decryptionCount++;
            if (input) {
                var ctx = normalizeInput(input);
                data.input.push(ctx)
            }
            data.algorithms.push(this.getAlgorithm());
            data.iv.push(byteArraytoHexString(this.getIV()));
            var retVal = this.doFinal.overloads[6].apply(this, arguments);
            var tmp = byteArraytoHexString(retVal);
            var decipher = displayString(tmp);
            data.content.push(decipher)
            return retVal;
        }
    }
    
});

function sendToPython(){
    send(data);
  }
setInterval(sendToPython, 5000);