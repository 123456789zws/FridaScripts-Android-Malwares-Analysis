import sys, argparse, frida
from prettytable import PrettyTable

def argments_parser():
    parser = argparse.ArgumentParser(description="Tool that help look inside a process!!!")
    parser.add_argument("-p", "--process-id", type=int, help="Process ID (integer)")
    parser.add_argument("--load", type=str, help="File to load")
    parser.add_argument("-U", "--usb", action="store_true", help='Use the first usb device available')
    args = parser.parse_args()
    return args

def display(data):
    table = PrettyTable()
    table.field_names = data[0].keys()
    for row in data:
        table.add_row(row.values())
    print(table)

def on_message(message, data):
    if message['type'] == 'send':
        print("getting the response....")
        response = message['payload']
        print(response)

def main(pid, jsfile):
    device = frida.get_local_device()
    info = device.query_system_parameters()
    a = [
    {'arch': info['arch'],
        'os-name': info['os']['name'],
        'os-version': info['os']['version'],
        'platform': info['platform'],
        'hostname': info['name'],
        'Access Level': info['access'],
        }]
    display(a)
    all_processes = device.enumerate_processes()
    P = []
    for process in all_processes:
        tmp = {
            "pid": process.pid,
            "name": process.name,
            "parameters": process.parameters
        }
        P.append(tmp)
    display(P)
    with open(jsfile, 'r') as file:
        jscode = file.read().strip()
    process = device.attach(pid)
    script = process.create_script(jscode)
    script.load()
    script.on("message", on_message)
    sys.stdin.read()
    sys.exit(0)

if __name__ == "__main__":
    args = argments_parser()
    if args.usb == False:
        if args.process_id is not None and args.load is not None:
            print("[+]Process ID: ", args.process_id)
            print("[+]File to load: ", args.load)
            main(args.process_id, args.load)
        else:
            print("[-]Usage: python run.py -p <PID> --load <JS FILE PATH>")
    else:
        if args.process_id is not None and args.load is not None:
            print("[+]Process ID: ", args.process_id)
            print("[+]File to load: ", args.load)
        else:
            print("[-]Usage: python run.py -U -p <PID> --load <JS FILE PATH>")
